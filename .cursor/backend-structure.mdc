---
description: 
globs: 
alwaysApply: false
---
# HyperWear — Back-End Structure (MVP v1.0)
# Paste into Cursor to pin the API, DB, and ops layout.

──────────────────────────────────────────────────────────────────────────────
1. Runtime & Hosting
   • Next.js 14 Route-Handlers (Edge runtime where viable)
   • Deployed on Vercel (auto preview from GitHub)

──────────────────────────────────────────────────────────────────────────────
2. API Folder Map  (inside /app/api/**)

create-order/route.ts   POST – draft order  ➜ pending_payment
payment/webhook/route.ts  POST – verifies NowPayments + Stripe
admin/
 ├─ printify/route.ts     POST – ops paste Printify order_id + tracking
 └─ stake-hype/route.ts   POST – ops paste manual stake tx_hash + amount
inventory/route.ts        GET  – returns live supply (total-units_sold)

All handlers share util:
lib/server/verifyProvider.ts  // sig/HMAC helpers
lib/server/sendMail.ts        // SendGrid / Resend helper

──────────────────────────────────────────────────────────────────────────────
3. Database – Supabase SQL

-- products (static seed)
create table products (
  id uuid primary key default uuid_generate_v4(),
  name text, price int, image text
);

create table inventory (
  sku uuid references products(id),
  total int,
  units_sold int default 0,
  primary key (sku)
);

create table cart_items (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references auth.users,
  product_id uuid references products(id),
  qty int
);

create table orders (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references auth.users,
  email text,
  phone text,
  address_json jsonb,
  status text check (status in ('pending_payment','paid','in_production','shipped','delivered')) default 'pending_payment',
  provider text,          -- 'np' or 'stripe'
  provider_invoice_id text,
  printify_order_id text,
  tracking_url text,
  created_at timestamp default now()
);

create table order_items (
  order_id uuid references orders(id),
  product_id uuid references products(id),
  size text,
  qty int
);

create table staking_events (
  id uuid primary key default uuid_generate_v4(),
  tx_hash text,
  amount numeric,
  staked_at timestamp default now()
);

-- RLS examples
alter table cart_items   enable row level security;
create policy "cart only owner"
  on cart_items for select using (auth.uid() = user_id);

alter table orders enable row level security;
create policy "orders only owner"
  on orders for select using (auth.uid() = user_id);

-- admin role for founders
-- founders' UUIDs saved in ENV ADMIN_UIDS, checked inside admin routes

──────────────────────────────────────────────────────────────────────────────
4. Webhook Verification

payment/webhook/route.ts
  if provider === 'np'
      verify HMAC via NOWPAYMENTS_IPN_SECRET
  else if provider === 'stripe'
      stripe.webhooks.constructEvent(rawBody, sig, STRIPE_WEBHOOK_SECRET)

  on success:
    update orders set status='paid'
    update inventory set units_sold = units_sold + qty
    sendMail(customer) + sendMail(ops)

──────────────────────────────────────────────────────────────────────────────
5. Admin Helpers  (manual ops)

POST /api/admin/printify
  body: { orderId, printifyId, trackingUrl, status }   # status in_production | shipped
  checks: user.uid in ADMIN_UIDS
  effect: update orders set printify_order_id, tracking_url, status

POST /api/admin/stake-hype
  body: { txHash, amount }
  effect: insert into staking_events

──────────────────────────────────────────────────────────────────────────────
6. Cron Jobs (Vercel)

/api/cron/purge-pii  (weekly)
  delete address_json, phone
  from orders
  where status='delivered' and created_at < now() - interval '30 days';

──────────────────────────────────────────────────────────────────────────────
7. ENV Variables (.env.example)

SUPABASE_URL=
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE=
NOWPAYMENTS_KEY=
NOWPAYMENTS_IPN_SECRET=
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=
SENDGRID_API_KEY=
ADMIN_UIDS=uuid1,uuid2   # comma-sep founder user IDs

──────────────────────────────────────────────────────────────────────────────
8. Error Handling

• All Route-Handlers return JSON: { ok: boolean, error?: string }
• Log provider payloads to Supabase function `log_webhook(json)` for replay.
• Sentry (opt-in) for unhandled exceptions.

──────────────────────────────────────────────────────────────────────────────
9. Local Dev Quick-Start

pnpm i
supabase start            # local Postgres + auth emulator
cp .env.example .env.local
pnpm dev                  # Next.js

# End Back-End Structure
