CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE
  public.orders (
    id UUID DEFAULT uuid_generate_v4 () PRIMARY KEY,
    user_id UUID REFERENCES auth.users (id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    total NUMERIC(10, 2) NOT NULL,
    delivery_name TEXT,
    delivery_email TEXT,
    address_line1 TEXT,
    city TEXT,
    postal_code TEXT,
    country TEXT,
    status VARCHAR(20) NOT NULL DEFAULT 'pending',
    payment_method VARCHAR(50),
    wallet_address TEXT,
    paid_amount NUMERIC(20, 10) DEFAULT 0,
    remaining_amount NUMERIC(20, 10),
    tx_hashes TEXT[] DEFAULT '{}',
    expires_at TIMESTAMP WITH TIME ZONE
  );

CREATE TABLE
  public.order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id UUID REFERENCES public.orders (id) ON DELETE CASCADE,
    product_id UUID NOT NULL,
    variant_id UUID,
    quantity INTEGER NOT NULL,
    price_at_purchase NUMERIC(10, 2) NOT NULL
  );

-- Function to set remaining_amount on new orders
CREATE OR REPLACE FUNCTION set_initial_remaining_amount()
RETURNS TRIGGER AS $$
BEGIN
  NEW.remaining_amount = NEW.total;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to call the function
CREATE TRIGGER set_remaining_amount_trigger
BEFORE INSERT ON public.orders
FOR EACH ROW
EXECUTE FUNCTION set_initial_remaining_amount(); 